        - const nx = 1200 #lattice number in horizontal direction
        - const ny = 600 #lattice number in vertical direction
        - const U = 0.1
        - const Q = 9
        - u = rand(Float64, nx, ny); #horizontal velocity component
        - v = rand(Float64, nx, ny); #vertical velocity component
        - ρ = ones(Float64, nx, ny); #initial density
        - f = rand(Float64, nx, ny, Q); #distribution function
        - 
        - 
        - function boundaryCondition0!(nx, ny, u, v, ρ, U, f)
285850764 nothing
      192 @views @. f[1, 2:ny-1, 1] = f[1, 2:ny-1, 3] + ρ[1, 2:ny-1] * U * 2.0 / 3.0
      320 @views @. f[1, 2:ny-1, 5] = f[1, 2:ny-1, 7] - 0.5 * (f[1, 2:ny-1, 2] - f[1, 2:ny-1, 4]) + ρ[1, 2:ny-1] * U / 6.0
      320 @views @. f[1, 2:ny-1, 8] = f[1, 2:ny-1, 6] + 0.5 * (f[1, 2:ny-1, 2] - f[1, 2:ny-1, 4]) + ρ[1, 2:ny-1] * U / 6.0
        0 @views u[1, 2:ny-1] .= U
        0 @views v[1, 2:ny-1] .= 0.0
        - 
      128 @views @. f[nx, :, 3] = f[nx-1, :, 3]
      128 @views @. f[nx, :, 6] = f[nx-1, :, 6]
      128 @views @. f[nx, :, 7] = f[nx-1, :, 7]
        - 
      128 @views @. f[:, 1, 2] = f[:, 1, 4]
      128 @views @. f[:, 1, 5] = f[:, 1, 7]
      128 @views @. f[:, 1, 6] = f[:, 1, 8]
        0 @views u[:, 1] .= 0.0
        0 @views v[:, 1] .= 0.0
        - 
      128 @views @. f[:, ny, 4] = f[:, ny, 2]
      128 @views @. f[:, ny, 8] = f[:, ny, 6]
      128 @views @. f[:, ny, 7] = f[:, ny, 5]
        0 @views u[:, ny] .= 0.0
        0 @views v[:, ny] .= 0.0
        - 
        0 nothing
        - end
        - 
        - function boundaryCondition1!(nx, ny, u, v, ρ, U, f)
174536438 nothing
     9856 @. f[1, 2:ny-1, 1] = f[1, 2:ny-1, 3] + ρ[1, 2:ny-1] * U * 2.0 / 3.0
        - 
    39424 tmp = 0.5 * (f[1, 2:ny-1, 2] - f[1, 2:ny-1, 4]) + ρ[1, 2:ny-1] * U / 6.0
     4928 @. f[1, 2:ny-1, 5] = f[1, 2:ny-1, 7] - tmp
     4928 @. f[1, 2:ny-1, 8] = f[1, 2:ny-1, 6] + tmp
        0 u[1, 2:ny-1] .= U
        0 v[1, 2:ny-1] .= 0.0
        - 
      128 @views @. f[nx, :, 3] = f[nx-1, :, 3]
      128 @views @. f[nx, :, 6] = f[nx-1, :, 6]
      128 @views @. f[nx, :, 7] = f[nx-1, :, 7]
        - 
      128 @views @. f[:, 1, 2] = f[:, 1, 4]
      128 @views @. f[:, 1, 5] = f[:, 1, 7]
      128 @views @. f[:, 1, 6] = f[:, 1, 8]
        0 u[:, 1] .= 0.0
        0 v[:, 1] .= 0.0
        - 
      128 @views @. f[:, ny, 4] = f[:, ny, 2]
      128 @views @. f[:, ny, 8] = f[:, ny, 6]
      128 @views @. f[:, ny, 7] = f[:, ny, 5]
        0 u[:, ny] .= 0.0
        0 v[:, ny] .= 0.0
        - 
        0 nothing
        - end
        - 
        - function boundaryCondition2!(nx, ny, u, v, ρ, U, f)
105933498 nothing
     9856 @. f[1, 2:ny-1, 1] = f[1, 2:ny-1, 3] + ρ[1, 2:ny-1] * U * 2.0 / 3.0
        - 
    39424 tmp = 0.5 * (f[1, 2:ny-1, 2] - f[1, 2:ny-1, 4]) + ρ[1, 2:ny-1] * U / 6.0
     4928 @. f[1, 2:ny-1, 5] = f[1, 2:ny-1, 7] - tmp
     4928 @. f[1, 2:ny-1, 8] = f[1, 2:ny-1, 6] + tmp
        0 u[1, 2:ny-1] .= U
        0 v[1, 2:ny-1] .= 0.0
        - 
      128 @views @. f[nx, :, 3] = f[nx-1, :, 3]
      128 @views @. f[nx, :, 6] = f[nx-1, :, 6]
      128 @views @. f[nx, :, 7] = f[nx-1, :, 7]
        - 
      128 @views f[:, 1, 2] .= f[:, 1, 4]
      128 @views f[:, 1, 5] .= f[:, 1, 7]
      128 @views f[:, 1, 6] .= f[:, 1, 8]
        0 u[:, 1] .= 0.0
        0 v[:, 1] .= 0.0
        - 
      128 @views @. f[:, ny, 4] = f[:, ny, 2]
    19456 copy!(f[:, ny, 8], f[:, ny, 6])
     9792 copy!(f[:, ny, 7], @views f[:, ny, 5])
        0 u[:, ny] .= 0.0
        0 v[:, ny] .= 0.0
        - 
        0 nothing
        - end
        - 
        - boundaryCondition0!(nx, ny, u, v, ρ, U, f);
        - boundaryCondition1!(nx, ny, u, v, ρ, U, f);
        - boundaryCondition2!(nx, ny, u, v, ρ, U, f);
