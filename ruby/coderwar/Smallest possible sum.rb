# honor-ori=329-(submit)>331-(very)>362
@debug = nil

# 226 442 404 369 251 206 
def solution(a)
  min = a.sort![0]
  return a.reduce(:+) if a[0] == a[-1]
  solution a.map {|i| i%min == 0 ? min : i%min}
end

# 366 240 414 462 222 367
def psum(num)
  a = num.sort
  return a.reduce(:+) if a[0] == a[-1]
  psum a.map {|i| i%a[0] == 0 ? a[0] : i%a[0]}
end

# 435 415 238 370 219
def pTEST(num)
  puts "\n============#{num}================" if @debug
  a = num.sort
  
  loop do
    a.sort!
    s_a = a.reduce(:+)
    print a, ' ', s_a, "\n" if @debug
    return s_a if a[0] == a[-1]

    a.map! {|i| i%a[0] == 0 ? a[0] : i%a[0]}
    print a, ' ', "\n\n" if @debug
  end
end

def best(a)
  a.reduce(:gcd)*a.length
end

# unit test

p pTEST([2, 2, 2]), solution([2, 2, 2]), "------"
p pTEST([6, 9, 21]), solution([6, 9, 21]), "------"
p pTEST([1, 2, 3]), solution([1, 2, 3]), "------"
p pTEST([1, 1, 2]), solution([1, 1, 2]), "------"
p pTEST([3, 5, 9]), solution([3, 5, 9]), "------"
p pTEST([71, 37, 3]), solution([71, 37, 3]), "------"
p pTEST([123, 645, 439]), solution([123, 645, 439]), "------"

t1 = [3980, 6244, 8277, 8396, 10880, 16620, 25704, 24536, 30375, 27260, 29744, 35748, 11]
t2 = [2299, 6366, 11109, 15228, 16890, 13950, 17367, 16832, 26424, 21430, 37301, 31956, 49998, 48020, 58275, 55920, 13]

p pTEST(t1), solution(t1), best(t1), "------"
p pTEST(t2), solution(t2), "------"

=begin
# ==================== Time test ===========================

TEST_arr = [6461333093, 6461333687, 6461334059, 6461334559, 6461333101, 6461333693, 6461334079, 6461334563, 6461333117, 6461333713, 6461334101, 6461334571, 6461333143, 6461333737, 6461334107, 6461334577, 6461333171, 6461333741, 6461334119, 6461334587, 6461333227, 6461333759, 6461334149, 6461334601, 6461333267, 6461333773, 6461334163, 6461334611, 6461333269, 6461333783, 6461334167, 6461334643, 6461333311, 6461333797, 6461334193, 6461334701, 6461333321, 6461333831, 6461334203, 6461334707, 6461333353, 6461333839, 6461334223, 6461334739, 6461333357, 6461333849, 6461334233, 6461334767, 6461333369, 6461333861, 6461334263, 6461334779, 6461333387, 6461333863, 6461334277, 6461334829, 6461333399, 6461333867, 6461334287, 6461334881, 6461333419, 6461333887, 6461334289, 6461334899, 6461333423, 6461333899, 6461334301, 6461334977, 6461333491, 6461333917, 6461334329, 6461335009, 6461333521, 6461333929, 6461334343, 6461335019, 6461333537, 6461333947, 6461334401, 6461335033, 6461333563, 6461333953, 6461334419, 6461335039, 6461333621, 6461333959, 6461334461, 6461335081, 6461333647, 6461334017, 6461334479, 6461335093, 6461333651, 6461334029, 6461334511, 6461335103, 6461333653, 6461334037, 6461334533, 6461335109]

array = (1..100000).map { rand }

#puts pTEST(TEST_arr),pTEST(array),solution(TEST_arr),solution(array),psum(TEST_arr),psum(array)

require 'benchmark'   
Benchmark.bmbm(10) do |t| 
  t.report{
    pTEST(TEST_arr)
    pTEST(array)
  } 
  t.report{
    solution(TEST_arr)
    solution(array)
  } 
  t.report{
    psum(TEST_arr)
    psum(array)
  } 
end
=end


